import numpy as np
import pymc3 as pm

sudoku = np.array([
    [0, 0, 3, 0, 2, 0, 6, 0, 0],
    [9, 0, 0, 3, 0, 5, 0, 0, 1],
    [0, 0, 1, 8, 0, 6, 4, 0, 0],
    [0, 0, 8, 1, 0, 2, 9, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 8],
    [0, 0, 6, 7, 0, 8, 2, 0, 0],
    [0, 0, 2, 6, 0, 9, 5, 0, 0],
    [8, 0, 0, 2, 0, 3, 0, 0, 9],
    [0, 0, 5, 0, 1, 0, 3, 0, 0]])

# On crée le modèle
model = pm.Model()

#Condition pourmodèle créer
with model:
    #Création cellules
    cells = pm.DiscreteUniform('cells', lower=1, upper=9, shape=(9,9))
    #Boucles lignes
    for i in range(9):
        #Condition lignes bouclé
        pm.Deterministic('row%i' % i, cells[i])
        #Condition colonne bouclé
        pm.Deterministic('col%i' % i, cells[:, i])
        #Condition variable aléatoire
        pm.Deterministic('square%i' % i, cells[np.floor(i/3)*3:np.floor(i/3)*3+3, (i%3)*3:(i%3)*3+3].ravel())

    # On ajoute les contraintes pour les cases déjà remplies
    for i in range(9):
        for j in range(9):
            if sudoku[i,j] != 0:
                pm.Potential('cell%i_%i' % (i, j), pm.math.switch(cells[i,j] == sudoku[i, j], 0, -np.inf))
    debut = pm.find_MAP()
    etape = pm.Metropolis()
    sudo = pm.sample(50000, step = etape, debut = debut)


affichage = np.array(sudo['cells'][-1]).reshape((9,9))
print(affichage)
